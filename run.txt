
      {/* Delivery Info */}
      <View style={styles.card}>
        <View style={styles.row}>
          <Icon name="bicycle-outline" size={20} color="#4CAF50" />
          <Text style={styles.cardTitle}>Estimated Delivery</Text>
        </View>
        <Text style={styles.deliveryInfo}>Standard (15-30 mins)</Text>
      </View>

      {/* Payment Method */}
      <View style={styles.card}>
        <View style={styles.row}>
          <Icon name="card-outline" size={20} color="#4CAF50" />
          <Text style={styles.cardTitle}>Payment Method</Text>
          <TouchableOpacity>
            <Icon name="pencil" size={20} color="#4CAF50" />
          </TouchableOpacity>
        </View>
        <TouchableOpacity style={styles.addPaymentButton}>
          <Text style={styles.addPaymentText}>+ Add Payment Method</Text>
        </TouchableOpacity>
      </View>

      {/* Total and Place Order Button */}
      <View style={styles.footer}>
        <Text style={styles.totalText}>Total</Text>
        <Text style={styles.totalAmount}>Rs 2,907.99</Text>
        <TouchableOpacity style={styles.placeOrderButton}>
          <Text style={styles.placeOrderText}>Place Order</Text>
        </TouchableOpacity>
      </View>
    </View>

    import { nanoid } from 'nanoid'; // For generating unique IDs

addToCart: (state, action) => {
    // Compare item attributes to find an exact match
    const cartItem = state.cart.find(item =>
        item.originalId === action.payload.id && // Compare against the original item's ID
        JSON.stringify(item) === JSON.stringify({ ...action.payload, quantity: item.quantity })
    );

    if (cartItem) {
        // If the exact same item exists, increment its quantity
        cartItem.quantity++;
    } else {
        // Add a new item to the cart with a unique ID
        state.cart.push({
            ...action.payload,
            quantity: 1,
            originalId: action.payload.id, // Keep the original item ID
            id: nanoid(), // Assign a unique ID to this variation
        });
    }

    // Update the total price
    state.totalPrice = state.cart.reduce(
        (total, item) => total + item.price * item.quantity,
        0
    );
},

reducers:{
        addToCart : (state,action)=>{
            // const cartItem = state.cart.find(item => item.id === action.payload.id);
            // if(cartItem){
            //         cartItem.quantity ++;
            //     }
        
            // else{
            //     state.cart.push({...action.payload, quantity : 1 });
            // }
            
            // state.totalPrice = state.cart.reduce((total, item) => total + item.price * item.quantity, 0);
            const uniqueKey = JSON.stringify(
                Object.keys(action.payload)
                    .filter((key) => key !== "quantity") // Exclude quantity from key generation
                    .sort() // Ensure consistent ordering of keys
                    .reduce((acc, key) => {
                        acc[key] = action.payload[key];
                        return acc;
                    }, {})
            );
        
            // Find if an item with the same unique key exists in the cart
            const cartItem = state.cart.find((item) => item.uniqueKey === uniqueKey);
        
            if (cartItem) {
                // Increment quantity if the item exists
                cartItem.quantity++;
            } else {
                // Add the new item to the cart with its unique key
                state.cart.push({ ...action.payload, uniqueKey, quantity: 1 });
            }
        
            // Update the total price
            state.totalPrice = state.cart.reduce((total, item) => total + item.price * item.quantity, 0);
        },
        removeFromCart : (state,action)=>{
            const ItemsInCart = state.cart.filter((item) => item.id !== action.payload.id); 
            state.cart = ItemsInCart;
            state.totalPrice = state.cart.reduce((total, item) => total + item.price * item.quantity, 0);
        },
        incrementQuantity : (state,action)=>{
            const cartItem = state.cart.find(item => item.id === action.payload.id);
            if(cartItem){
                cartItem.quantity ++;
            }
            state.totalPrice = state.cart.reduce((total, item) => total + item.price * item.quantity, 0);
        },
        // if the quantity is 1 item is removed from the cart else decrement the quantity
        decrementQuantity: (state,action)=>{
            const cartItem= state.cart.find(item=> item.id === action.payload.id)
            if(cartItem.quantity == 1){
                const ItemsInCart = state.cart.filter((item) => item.id !== cartItem.id); 
                state.cart=ItemsInCart;
            }
            else{
                cartItem.quantity --;
            }
            state.totalPrice = state.cart.reduce((total, item) => total + item.price * item.quantity, 0);
        }

    }
